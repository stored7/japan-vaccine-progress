{"version":3,"sources":["webpack://performance/./node_modules/react-apexcharts/src/react-apexcharts.jsx"],"names":["window","ApexCharts","Charts","Component","props","super","this","chartRef","setRef","el","chart","ref","current","getConfig","render","type","height","width","series","options","newOptions","extend","item","Array","isArray","target","source","Object","assign","TypeError","output","index","arguments","length","nextKey","hasOwnProperty","isObject","keys","forEach","key","prevProps","prevOptions","JSON","stringify","prevSeries","currentOptions","currentSeries","updateOptions","updateSeries","destroy","propTypes","defaultProps"],"mappings":"gNAIAA,OAAOC,WAAa,IAEL,MAAMC,UAAe,EAAAC,UAClC,YAAaC,GACXC,MAAMD,GACF,YACFE,KAAKC,SAAW,cAEhBD,KAAKE,OAASC,GAAMH,KAAKC,SAAWE,EAEtCH,KAAKI,MAAQ,KAGf,SACE,SAAWN,GAAUE,KAAKF,MAC1B,OAAO,gBAAoB,MAAO,CAChCO,IAAK,YACDL,KAAKC,SACLD,KAAKE,UACNJ,IAIP,oBACE,MAAMQ,EAAU,YAAkBN,KAAKC,SAASK,QAAUN,KAAKC,SAC/DD,KAAKI,MAAQ,IAAI,IAAJ,CAAeE,EAASN,KAAKO,aAC1CP,KAAKI,MAAMI,SAGb,YACE,MAAM,KAAEC,EAAI,OAAEC,EAAM,MAAEC,EAAK,OAAEC,EAAM,QAAEC,GAAYb,KAAKF,MAChDgB,EAAa,CACjBV,MAAO,CACLK,OACAC,SACAC,SAEFC,UAGF,OAAOZ,KAAKe,OAAOF,EAASC,GAG9B,SAASE,GACP,OACEA,GAAwB,iBAATA,IAAsBC,MAAMC,QAAQF,IAAiB,MAARA,EAIhE,OAAQG,EAAQC,GACe,mBAAlBC,OAAOC,SAEdD,OAAOC,OAAS,SAAUH,GAExB,GAAIA,QACF,MAAM,IAAII,UAAU,8CAGtB,IAAIC,EAASH,OAAOF,GACpB,IAAK,IAAIM,EAAQ,EAAGA,EAAQC,UAAUC,OAAQF,IAAS,CACrD,IAAIL,EAASM,UAAUD,GACvB,GAAIL,QACF,IAAK,IAAIQ,KAAWR,EACdA,EAAOS,eAAeD,KACxBJ,EAAOI,GAAWR,EAAOQ,IAKjC,OAAOJ,IAKb,IAAIA,EAASH,OAAOC,OAAO,GAAIH,GAkB/B,OAjBInB,KAAK8B,SAASX,IAAWnB,KAAK8B,SAASV,IACzCC,OAAOU,KAAKX,GAAQY,SAASC,IACvBjC,KAAK8B,SAASV,EAAOa,IACjBA,KAAOd,EAKXK,EAAOS,GAAOjC,KAAKe,OAAOI,EAAOc,GAAMb,EAAOa,IAJ9CZ,OAAOC,OAAOE,EAAQ,CACpB,CAACS,GAAMb,EAAOa,KAMlBZ,OAAOC,OAAOE,EAAQ,CACpB,CAACS,GAAMb,EAAOa,QAKfT,EAGT,mBAAoBU,GAClB,IAAKlC,KAAKI,MAAO,OAAO,KACxB,MAAM,QAAES,EAAO,OAAED,EAAM,OAAEF,EAAM,MAAEC,GAAUX,KAAKF,MAC1CqC,EAAcC,KAAKC,UAAUH,EAAUrB,SACvCyB,EAAaF,KAAKC,UAAUH,EAAUtB,QACtC2B,EAAiBH,KAAKC,UAAUxB,GAChC2B,EAAgBJ,KAAKC,UAAUzB,GAGnCuB,IAAgBI,GAChBD,IAAeE,GACf9B,IAAWwB,EAAUxB,QACrBC,IAAUuB,EAAUvB,QAEhB2B,IAAeE,EAEjBxC,KAAKI,MAAMqC,cAAczC,KAAKO,aAE9B4B,IAAgBI,GAChB7B,IAAWwB,EAAUxB,QACrBC,IAAUuB,EAAUvB,MAGpBX,KAAKI,MAAMsC,aAAa9B,GAGxBZ,KAAKI,MAAMqC,cAAczC,KAAKO,cAKpC,uBACMP,KAAKI,OAAuC,mBAAvBJ,KAAKI,MAAMuC,SAAwB3C,KAAKI,MAAMuC,WAI3E/C,EAAOgD,UAAY,CACjBnC,KAAM,sBACNE,MAAO,QACPD,OAAQ,QACRE,OAAQ,qBACRC,QAAS,uBAGXjB,EAAOiD,aAAe,CACpBpC,KAAM,OACNE,MAAO,OACPD,OAAQ","file":"185-60cc7abb8156462d17b9.js","sourcesContent":["import ApexCharts from 'apexcharts/dist/apexcharts.common'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nwindow.ApexCharts = ApexCharts\n\nexport default class Charts extends Component {\n  constructor (props) {\n    super(props)\n    if (React.createRef) {\n      this.chartRef = React.createRef()\n    } else {\n      this.setRef = el => this.chartRef = el\n    }\n    this.chart = null\n  }\n\n  render () {\n    const { ...props } = this.props\n    return React.createElement('div', {\n      ref: React.createRef\n        ? this.chartRef\n        : this.setRef,\n      ...props\n    })\n  }\n\n  componentDidMount () {\n    const current = React.createRef ? this.chartRef.current : this.chartRef\n    this.chart = new ApexCharts(current, this.getConfig())\n    this.chart.render()\n  }\n\n  getConfig () {\n    const { type, height, width, series, options } = this.props\n    const newOptions = {\n      chart: {\n        type,\n        height,\n        width\n      },\n      series\n    }\n\n    return this.extend(options, newOptions)\n  }\n\n  isObject(item) {\n    return (\n      item && typeof item === 'object' && !Array.isArray(item) && item != null\n    )\n  }\n\n  extend (target, source) {\n    if (typeof Object.assign !== 'function') {\n      (function () {\n        Object.assign = function (target) {\n          // We must check against these specific cases.\n          if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object')\n          }\n\n          let output = Object(target)\n          for (let index = 1; index < arguments.length; index++) {\n            let source = arguments[index]\n            if (source !== undefined && source !== null) {\n              for (let nextKey in source) {\n                if (source.hasOwnProperty(nextKey)) {\n                  output[nextKey] = source[nextKey]\n                }\n              }\n            }\n          }\n          return output\n        }\n      })()\n    }\n\n    let output = Object.assign({}, target)\n    if (this.isObject(target) && this.isObject(source)) {\n      Object.keys(source).forEach((key) => {\n        if (this.isObject(source[key])) {\n          if (!(key in target)) {\n            Object.assign(output, {\n              [key]: source[key]\n            })\n          } else {\n            output[key] = this.extend(target[key], source[key])\n          }\n        } else {\n          Object.assign(output, {\n            [key]: source[key]\n          })\n        }\n      })\n    }\n    return output\n  }\n\n  componentDidUpdate (prevProps) {\n    if (!this.chart) return null\n    const { options, series, height, width } = this.props\n    const prevOptions = JSON.stringify(prevProps.options)\n    const prevSeries = JSON.stringify(prevProps.series)\n    const currentOptions = JSON.stringify(options)\n    const currentSeries = JSON.stringify(series)\n\n    if (\n      prevOptions !== currentOptions ||\n      prevSeries !== currentSeries ||\n      height !== prevProps.height ||\n      width !== prevProps.width\n    ) {\n      if (prevSeries === currentSeries) {\n        // series has not changed, but options or size have changed\n        this.chart.updateOptions(this.getConfig())\n      } else if (\n        prevOptions === currentOptions &&\n        height === prevProps.height &&\n        width === prevProps.width\n      ) {\n        // options or size have not changed, just the series has changed\n        this.chart.updateSeries(series)\n      } else {\n        // both might be changed\n        this.chart.updateOptions(this.getConfig())\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.chart && typeof this.chart.destroy === 'function') this.chart.destroy()\n  }\n}\n\nCharts.propTypes = {\n  type: PropTypes.string.isRequired,\n  width: PropTypes.any,\n  height: PropTypes.any,\n  series: PropTypes.array.isRequired,\n  options: PropTypes.object.isRequired\n}\n\nCharts.defaultProps = {\n  type: 'line',\n  width: '100%',\n  height: 'auto'\n}\n"],"sourceRoot":""}